print_rec_laptops(L):-
    (   L = [] -> writeln("Sorry, cannot find a laptop in my knowledge base.")
    ;   writeln(''),
        writeln("Recommended laptops with reasoning: "),
        writeln(''),
        (   member(Model, L),
            laptop_detail(Model, Price, RAM, Storage, Processor, Display, Graphics, Weight),
            % Print specifications
            format('Model: ~w~nPrice in LKR: ~w~nRAM: ~w~nStorage: ~w~nProcessor: ~w~nDisplay: ~w~nGraphics: ~w~nWeight: ~w~n', 
                [Model, Price, RAM, Storage, Processor, Display, Graphics, Weight]),
            writeln(''),
            % Generate and print explanation using backward chaining
            explain_specs(Price, RAM, Storage, Processor, Display, Graphics, Weight, Explanation),
            format('Reasoning:~n~w~n', [Explanation]),
            writeln('----------------------------------------'),
            fail
        ;   true
        )
    ).


% Combine all explanations
explain_specs(Price, RAM, Storage, Processor, Display, Graphics, Weight, Explanation) :-
    explain_price(Price, PriceExp),
    explain_ram(RAM, RAMExp),
    explain_storage(Storage, StorageExp),
    explain_processor(Processor, ProcessorExp),
    explain_display(Display, DisplayExp),
    explain_graphics(Graphics, GraphicsExp),
    explain_weight(Weight, WeightExp),
    atomic_list_concat([
        'This laptop is recommended because:\n',
        PriceExp, '\n',
        RAMExp, '\n',
        StorageExp, '\n',
        ProcessorExp, '\n',
        DisplayExp, '\n',
        GraphicsExp, '\n',
        WeightExp
    ], Explanation).

% Explanation predicates for each specification
explain_price(Price, PriceExp) :-
    (Price < 300000 -> 
        PriceExp = '- Budget-friendly option under LKR 300,000'
    ; Price < 500000 ->
        PriceExp = '- Mid-range laptop with good value for money'
    ;
        PriceExp = '- Premium laptop with high-end specifications'
    ).

explain_ram(RAM, RAMExp) :-
    (RAM >= 16 ->
        RAMExp = '- 16GB RAM excellent for multitasking and demanding applications'
    ; RAM >= 8 ->
        RAMExp = '- 8GB RAM suitable for everyday computing tasks'
    ;
        RAMExp = '- Basic RAM configuration for light usage'
    ).

explain_storage(Storage, StorageExp) :-
    (Storage >= 1 ->
        StorageExp = '- Large storage capacity of 1TB or more'
    ; Storage >= 512 ->
        StorageExp = '- Decent 512GB storage for most users'
    ;
        StorageExp = '- Basic storage configuration'
    ).

explain_processor(Processor, ProcessorExp) :-
    (sub_string(Processor, _, _, _, 'i9') ->
        ProcessorExp = '- High-performance Intel Core i9 processor for intensive workloads'
    ; sub_string(Processor, _, _, _, 'i7') ->
        ProcessorExp = '- Powerful Intel Core i7 processor for demanding tasks'
    ; sub_string(Processor, _, _, _, 'M3') ->
        ProcessorExp = '- Latest Apple M3 chip offering excellent performance'
    ;
        ProcessorExp = '- Capable processor for general computing'
    ).

explain_display(Display, DisplayExp) :-
    (sub_string(Display, _, _, _, '16 inch') ->
        DisplayExp = '- Large 16-inch display ideal for productivity and entertainment'
    ; sub_string(Display, _, _, _, '15.6 inch') ->
        DisplayExp = '- Standard 15.6-inch display good for most uses'
    ; sub_string(Display, _, _, _, '14 inch') ->
        DisplayExp = '- Compact 14-inch display balancing portability and usability'
    ;
        DisplayExp = '- Display suitable for general use'
    ).

explain_graphics(Graphics, GraphicsExp) :-
    (sub_string(Graphics, _, _, _, 'RTX 3080') ->
        GraphicsExp = '- High-end RTX 3080 GPU for gaming and professional work'
    ; sub_string(Graphics, _, _, _, 'RTX 3060') ->
        GraphicsExp = '- Capable RTX 3060 GPU for gaming and content creation'
    ; sub_string(Graphics, _, _, _, 'GTX 1650') ->
        GraphicsExp = '- Entry-level dedicated GPU for basic graphics tasks'
    ; sub_string(Graphics, _, _, _, 'Integrated') ->
        GraphicsExp = '- Integrated graphics sufficient for everyday computing'
    ).

explain_weight(Weight, WeightExp) :-
    (Weight =< 1.3 ->
        WeightExp = '- Ultra-portable design under 1.3kg'
    ; Weight =< 1.8 ->
        WeightExp = '- Lightweight and portable under 1.8kg'
    ; Weight =< 2.2 ->
        WeightExp = '- Standard weight suitable for occasional transport'
    ;
        WeightExp = '- Desktop replacement with powerful components'
    ).





touch_screen_menu(Budget, Usage):-
    writeln('Do you prefer a touch screen laptop? '),
    writeln('1 ~ Yes'),
    writeln('2 ~ No'),
    read(D),
    (   D = 1 -> two_in_one_menu(Budget, Usage, touch_screen)
    ;   D = 2 -> two_in_one_menu(Budget, Usage, none)
    ;   writeln("Incorrect entry! choose a number between 1-2."), touch_screen_menu(Budget, Usage)
    ).

two_in_one_menu(Budget, Usage, Touch):-
    writeln('Do you prefer a two-in-one laptop? '),
    writeln('1 ~ Yes'),
    writeln('2 ~ No'),
    read(E),
    (   E = 1 -> light_weight_menu(Budget, Usage, Touch, two_in_one)
    ;   E = 2 -> light_weight_menu(Budget, Usage, Touch, none)
    ;   writeln("Incorrect entry! choose a number between 1-2."), two_in_one_menu(Budget, Usage, Touch)
    ).

light_weight_menu(Budget, Usage, Touch, Two_in_one):-
    writeln('Do you prefer a light weight laptop? '),
    writeln('1 ~ Yes'),
    writeln('2 ~ No'),
    read(F),
    (   F = 1 -> battery_menu(Budget, Usage, Touch, Two_in_one, light_weight)
    ;   F = 2 -> battery_menu(Budget, Usage, Touch, Two_in_one, none)
    ;   writeln("Incorrect entry! choose a number between 1-2."), light_weight_menu(Budget, Usage, Touch, Two_in_one)
    ).

battery_menu(Budget, Usage, Touch, Two_in_one, Light_weight):-
    writeln('Do you prefer a long battery life laptop? '),
    writeln('1 ~ Yes'),
    writeln('2 ~ No'),
    read(G),
    (   G = 1 -> screen_size_menu(Budget, Usage, Touch, Two_in_one, Light_weight, long_battery_life)
    ;   G = 2 -> screen_size_menu(Budget, Usage, Touch, Two_in_one, Light_weight, none)
    ;   writeln("Incorrect entry! choose a number between 1-2."), battery_menu(Budget, Usage, Touch, Two_in_one, Light_weight)
    ).

screen_size_menu(Budget, Usage, Touch, Two_in_one, Light_weight, Long_battery_life):-
    writeln('Do you prefer a large screen laptop? '),
    writeln('1 ~ Yes'),
    writeln('2 ~ No'),
    read(H),
    (   H = 1 -> find_windows(Budget, Usage, Touch, Two_in_one, Light_weight, Long_battery_life, large_screen)
    ;   H = 2 -> find_windows(Budget, Usage, Touch, Two_in_one, Light_weight, Long_battery_life, none)
    ;   writeln("Incorrect entry! choose a number between 1-2."), screen_size_menu(Budget, Usage, Touch, Two_in_one, Light_weight, Long_battery_life)
    ).




start:-
    writeln("==========================================="),nl,
    writeln("Welcome to the Laptop Recommendation System"),nl,
    writeln("==========================================="),nl,
    budget_menu.

budget_menu:-
    writeln('Please choose your budget range: '),
    writeln('1 ~ LKR 0 - LKR 150000'),
    writeln('2 ~ LKR 150000 - LKR 300000'),
    writeln('3 ~ LKR 300000 - LKR 400000'),
    writeln('4 ~ LKR 400000 - LKR 500000'),
    writeln('5 ~ LKR 500000 and above'),
    read(A),
    (budget_range(A, Budget) -> usage_menu(Budget);
        writeln("Incorrect entry! choose a number between 1-5."), budget_menu
    ).

get_budget(A):-
    (budget_range(A, Budget) -> 
        usage_menu(Budget)
    ;   
        fail
    ).

usage_menu(Budget):-
    writeln(Budget),
    writeln('Please choose the purpose of the laptop: '),
    writeln('1 ~ Daily Use'),
    writeln('2 ~ Programming'),
    writeln('3 ~ Gaming'),
    writeln('4 ~ Designing'),
    read(B),
    (laptop_usage(B, Usage) -> os_menu(Budget, Usage);
        writeln("Incorrect entry! choose a number between 1-4."), usage_menu(Budget)
    ).

os_menu(Budget, Usage):-
    writeln('Please choose the Operating System: '),
    writeln('1 ~ Windows'),
    writeln('2 ~ Mac OS'),
    read(C),
    (   C = 1 -> touch_screen_menu(Budget, Usage)
    ;   C = 2 -> find_mac(Budget, Usage)
    ;   writeln("Incorrect entry! choose a number between 1-2."), os_menu(Budget, Usage)
    ).